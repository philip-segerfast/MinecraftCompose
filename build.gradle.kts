import net.neoforged.moddevgradle.tasks.JarJar
import org.jetbrains.kotlin.gradle.utils.extendsFrom

val modVersion: String by project
val modGroupId: String by project
val modId: String by project
val modName: String by project
val modLicense: String by project
val modAuthors: String by project
val neoVersion: String by project
val modDescription: String by project
val neoVersionRange: String by project
val minecraftVersion: String by project
val loaderVersionRange: String by project
val minecraftVersionRange: String by project
val parchmentMappingsVersion: String by project
val parchmentMinecraftVersion: String by project

plugins {
    id("java-library")
    id("eclipse")
    id("idea")
    id("maven-publish")
    id("org.jetbrains.kotlin.jvm") version "2.0.0"
    // Minecraft modding plugin
    id("net.neoforged.moddev") version "1.0.17"
    // Compose
    alias(libs.plugins.jetbrainsCompose)
    id("org.jetbrains.kotlin.plugin.compose") version "2.0.0"
}

allprojects {
    version = modVersion
    group = modGroupId
}

repositories {
    mavenLocal()
    google()
    maven("https://thedarkcolour.github.io/KotlinForForge/") {
        content { includeGroup("thedarkcolour") }
    }
}

base {
    archivesName = modId
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
kotlin.jvmToolchain(21)

val jarred by configurations.creating {
    configurations.implementation.get().extendsFrom(this)
}

neoForge {
    // Specify the version of NeoForge to use.
    version = neoVersion

    validateAccessTransformers = true

    parchment {
        mappingsVersion = parchmentMappingsVersion
        minecraftVersion = parchmentMinecraftVersion
    }

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty("forge.logging.markers", "REGISTRIES,SCAN,REGISTRYDUMP")

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG

            programArguments.addAll(listOf("--mod", modId, "--all", "--output", file("src/generated/resources/").absolutePath, "--existing", file("src/main/resources/").absolutePath))
        }

        create("client") {
            client()
            sourceSet = sourceSets.main
        }
        create("data") {
            data()
        }
        create("server") {
            server()
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        create(modId) {
            sourceSet(sourceSets.main.get())
            extendsFrom(jarred)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.get().resources { srcDir("src/generated/resources") }

dependencies {
    implementation("thedarkcolour:kotlinforforge-neoforge:5.3.0")
    implementation(libs.kotlinx.coroutines.core)

    jarred(libs.compose.runtime) {
        isTransitive = false
    }
    jarred("androidx.collection:collection:1.4.3") {
        isTransitive = false
    }

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType<ProcessResources>().configureEach {
    val replaceProperties = mapOf(
        "minecraft_version" to minecraftVersion,
        "minecraft_version_range" to minecraftVersionRange,
        "neo_version" to neoVersion,
        "neo_version_range" to neoVersionRange,
        "loader_version_range" to loaderVersionRange,
        "mod_id" to modId,
        "mod_name" to modName,
        "mod_license" to modLicense,
        "mod_version" to modVersion,
        "mod_authors" to modAuthors,
        "mod_description" to modDescription
    )
    inputs.properties(replaceProperties)

    filesMatching("META-INF/neoforge.mods.toml") {
        expand(replaceProperties)
    }
}

tasks.withType<Jar> {
    from(jarred.map { if (it.isDirectory) it else zipTree(it) })
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}

tasks.named<Wrapper>("wrapper").configure {
    // Define wrapper values here to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.ALL
}
